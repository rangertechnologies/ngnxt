{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let SalesforceService = /*#__PURE__*/(() => {\n  class SalesforceService {\n    constructor(_router) {\n      this._router = _router;\n\n      this.getSFResource = path => `${window['_VfResources']}${path}`;\n\n      this.getRNXTMethodName = () => `${window['_rnxtMethodName']}`;\n    }\n\n    remoteAction(methodName, params, resolve, reject, config) {\n      // console.log('inside SalesforceService.remoteAction for ' + methodName);\n      const self = this;\n      var nsMethodName = this.getRNXTMethodName(); //console.log('method name in lib = ' + nsMethodName);\n\n      Visualforce.remoting.Manager.invokeAction(nsMethodName, //'NxtController.process',\n      //`{!$RemoteAction.NxtController.process}`,\n      ...params, function (result, event) {\n        try {\n          result = JSON.parse(result);\n        } catch (error) {\n          reject(error);\n        } //console.log('Function called was - ' + methodName);\n        //console.log(result);\n        //console.log(resolve(result));\n\n\n        if (result.status) {\n          resolve(result);\n        } else {\n          resolve(result);\n        }\n      }, config || {\n        buffer: false,\n        escape: false\n      });\n    }\n\n  }\n\n  SalesforceService.ɵfac = function SalesforceService_Factory(t) {\n    return new (t || SalesforceService)(i0.ɵɵinject(i1.Router));\n  };\n\n  SalesforceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SalesforceService,\n    factory: SalesforceService.ɵfac,\n    providedIn: 'root'\n  });\n  return SalesforceService;\n})();","map":null,"metadata":{},"sourceType":"module"}